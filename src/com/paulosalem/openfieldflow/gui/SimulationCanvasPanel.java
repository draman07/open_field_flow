/*
 * Open Field Flow - A particle system simulator in which particles 
 * flow through  and interact with a vector field.
 * 
 * Copyright (C) 2012  Paulo Salem (paulosalem@paulosalem.com)
 *
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.paulosalem.openfieldflow.gui;

import com.paulosalem.openfieldflow.domain.Agent;
import com.paulosalem.openfieldflow.engine.Simulation;
import com.paulosalem.openfieldflow.engine.SimulationStrategy;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.swing.JPanel;

/**
 *
 * @author  Paulo
 */
public class SimulationCanvasPanel extends JPanel {
    
    private Simulation simulation;
    
    private SimulationStrategy strategy;
    
    private boolean begin = true;

    /** Creates new form SimulationCanvasPanel */
    public SimulationCanvasPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    /*
    private void setLayout(Object o){
        
    }*/
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        //System.out.println("Mouse being dragged at (" + evt.getX() +", "+ evt.getY() + ")");
        strategy.mouseDragged(evt, simulation);
    }//GEN-LAST:event_formMouseDragged

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        
        
    }//GEN-LAST:event_formKeyTyped
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void paint(Graphics g) {

        // super.paint(g);

        // TODO make this work...
        int alpha;

        if(begin){
            // In the beginning, just set up the canvas in its full color.
            alpha = 255;
            begin = false;
        }
        else{
            // Add a transparent layer of color, so that the traces of the particle remains
            alpha = 255; // alpha = 10;
            
        }

        Graphics2D g2d = (Graphics2D)g;
        Rectangle rect = new Rectangle(this.getWidth(), this.getHeight());

        Color c = new Color(this.getBackground().getRed(), this.getBackground().getGreen(), this.getBackground().getBlue(), alpha);
        g2d.setPaint(c);
        g2d.fill(rect);
        g2d.setPaint(this.getBackground());


        if(simulation != null){
            synchronized(simulation.getAgents()){
                for(Agent a: simulation.getAgents()){
                    a.draw((Graphics2D)g);
                }
            }
        }
    }

    public Simulation getSimulation() {
        return simulation;
    }

    public void setSimulation(Simulation simulation) {
        this.simulation = simulation;
    }

    public void setStrategy(SimulationStrategy strategy) {
        this.strategy = strategy;
    }

    public SimulationStrategy getStrategy() {
        return strategy;
    }
    
    
    
    
}
